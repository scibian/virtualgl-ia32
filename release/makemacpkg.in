#!/bin/sh

set -u
set -e
trap onexit INT
trap onexit TERM
trap onexit EXIT

TMPDIR=

onexit()
{
	if [ ! "$TMPDIR" = "" ]; then
		rm -rf $TMPDIR
	fi
}

safedirmove ()
{
	if [ "$1" = "$2" ]; then
		return 0
	fi
	if [ "$1" = "" -o ! -d "$1" ]; then
		echo safedirmove: source dir $1 is not valid
		return 1
	fi
	if [ "$2" = "" -o -e "$2" ]; then
		echo safedirmove: dest dir $2 is not valid
		return 1
	fi
	if [ "$3" = "" -o -e "$3" ]; then
		echo safedirmove: tmp dir $3 is not valid
		return 1
	fi
	mkdir -p $3
	mv $1/* $3/
	rmdir $1
	mkdir -p $2
	mv $3/* $2/
	rmdir $3
	return 0
}

usage()
{
	echo "$0 [universal]"
	exit 1
}

UNIVERSAL=0

PACKAGE_NAME=@CMAKE_PROJECT_NAME@
VERSION=@VERSION@
BUILD=@BUILD@
SRCDIR=@CMAKE_SOURCE_DIR@
PREFIX=@CMAKE_INSTALL_PREFIX@
BINDIR=@VGL_BINDIR@
DOCDIR=@VGL_DOCDIR@
BUILDDIR32=@VGL_32BIT_BUILD@
if [ $# -gt 0 ]; then
	if [ "$1" = "universal" ]; then
		UNIVERSAL=1
	fi
fi

if [ -f $PACKAGE_NAME-$VERSION.dmg ]; then
	rm -f $PACKAGE_NAME-$VERSION.dmg
fi

umask 022
TMPDIR=`mktemp -d /tmp/$PACKAGE_NAME-build.XXXXXX`
PKGROOT=$TMPDIR/pkg/Package_Root
mkdir -p $PKGROOT

make install DESTDIR=$PKGROOT
if [ "$BINDIR" != "/usr/bin" ]; then
	mkdir -p $PKGROOT/usr/bin
	ln -fs $BINDIR/vglclient $PKGROOT/usr/bin/vglclient
	ln -fs $BINDIR/vglconnect $PKGROOT/usr/bin/vglconnect
fi

if [ $UNIVERSAL = 1 ]; then
	if [ ! -d $BUILDDIR32 ]; then
		echo ERROR: 32-bit build directory $BUILDDIR32 does not exist
		exit 1
	fi
	if [ ! -f $BUILDDIR32/Makefile ]; then
		echo ERROR: 32-bit build directory $BUILDDIR32 is not configured
		exit 1
	fi
	pushd $BUILDDIR32
	make
	popd
	lipo -create -arch i386 $BUILDDIR32/bin/vglclient \
		-arch x86_64 $PKGROOT$BINDIR/vglclient \
		-output $PKGROOT$BINDIR/vglclient
	chmod 755 $PKGROOT$BINDIR/vglclient
	lipo -create -arch i386 $BUILDDIR32/bin/tcbench \
		-arch x86_64 $PKGROOT$BINDIR/tcbench \
		-output $PKGROOT$BINDIR/tcbench
	chmod 755 $PKGROOT$BINDIR/tcbench
	lipo -create -arch i386 $BUILDDIR32/bin/nettest \
		-arch x86_64 $PKGROOT$BINDIR/nettest \
		-output $PKGROOT$BINDIR/nettest
	chmod 755 $PKGROOT$BINDIR/nettest
	lipo -create -arch i386 $BUILDDIR32/bin/glxinfo \
		-arch x86_64 $PKGROOT$BINDIR/glxinfo \
		-output $PKGROOT$BINDIR/glxinfo
	chmod 755 $PKGROOT$BINDIR/glxinfo
fi

mkdir -p $PKGROOT/Library/Documentation
safedirmove $PKGROOT$DOCDIR $PKGROOT/Library/Documentation/$PACKAGE_NAME $TMPDIR/__tmpdoc

mkdir -p $TMPDIR/pkg/
cp $SRCDIR/release/License.rtf $SRCDIR/release/Welcome.txt $SRCDIR/release/ReadMe.txt $TMPDIR/pkg/
install -m 755 pkgscripts/uninstall $PKGROOT$BINDIR/

mkdir -p "$PKGROOT/Applications/$PACKAGE_NAME"
install -m 644 $SRCDIR/release/ReadMe-MacApp.txt "$PKGROOT/Applications/$PACKAGE_NAME/Read Me.txt"
ln -fs /Library/Documentation/$PACKAGE_NAME/index.html "$PKGROOT/Applications/$PACKAGE_NAME/$PACKAGE_NAME User's Guide.html"
if [ "$PREFIX" = "/opt/VirtualGL" ]; then
	ln -fs /Library/Documentation/$PACKAGE_NAME $PKGROOT/$PREFIX/doc
fi
install -m 644 @CMAKE_BINARY_DIR@/pkgscripts/uninstall.applescript $TMPDIR
osacompile -t APPL -a i386 -o "$TMPDIR/Uninstall $PACKAGE_NAME.app" $TMPDIR/uninstall.applescript
cp -RX "$TMPDIR/Uninstall $PACKAGE_NAME.app" "$PKGROOT/Applications/$PACKAGE_NAME/"

mkdir $TMPDIR/dmg
pkgbuild --root $PKGROOT --version $VERSION.$BUILD \
	--identifier com.virtualgl.vglclient $TMPDIR/pkg/$PACKAGE_NAME.pkg
productbuild --distribution pkgscripts/Distribution.xml \
	--package-path $TMPDIR/pkg/ --resources $TMPDIR/pkg/ \
	$TMPDIR/dmg/$PACKAGE_NAME.pkg
mv "$TMPDIR/Uninstall $PACKAGE_NAME.app" $TMPDIR/dmg/
hdiutil create -fs HFS+ -volname $PACKAGE_NAME-$VERSION \
	-srcfolder "$TMPDIR/dmg" $TMPDIR/$PACKAGE_NAME-$VERSION.dmg
cp $TMPDIR/$PACKAGE_NAME-$VERSION.dmg . 

exit
