# This is a hack to prevent the RPM from depending on libGLcore.so.1 and
# libnvidia-tls.so.1 if it was built on a system that has the NVidia
# drivers installed.  The custom find-requires script is created during
# install and removed during clean
%define __find_requires %{_tmppath}/%{name}-%{version}-%{release}-find-requires

# Path under which VirtualGL should be installed
%define prefix @CMAKE_INSTALL_PREFIX@

# Path under which executables and scripts should be installed
%define bindir @VGL_BINDIR@

# Create symlinks in %{_bindir} (usually /usr/bin), assuming
# %{bindir} != %{_bindir}
%define binsymlinks 1

%ifarch x86_64
%define _syslibdir /usr/lib64
%else
%define _syslibdir /usr/lib
%endif

# Path under which the VirtualGL faker libraries should be installed
%define libdir %{_syslibdir}

# Path under which the VirtualGL transport API headers should be installed
%define incdir @VGL_INCDIR@

# Create symlinks in %{_includedir} (usually /usr/include), assuming
# %{incdir} != %{_includedir}
%define incsymlinks 1

# Path under which the libGL symlinks for Chromium should be installed
%ifarch x86_64
%define fakelibdir %{prefix}/fakelib64
%else
%define fakelibdir %{prefix}/fakelib32
%endif

# Path under which docs should be installed
%define docdir %{_defaultdocdir}/%{name}-%{version}

Summary: A toolkit for displaying OpenGL applications to thin clients
Name: @CMAKE_PROJECT_NAME@
Version: @VERSION@
Vendor: The VirtualGL Project
URL: http://www.virtualgl.org
Group: Applications/Graphics
#-->Source0: http://prdownloads.sourceforge.net/virtualgl/VirtualGL-%{version}.tar.gz
Release: @BUILD@
License: wxWindows Library License v3.1
BuildRoot: %{_blddir}/%{name}-buildroot-%{version}-%{release}
Prereq: /sbin/ldconfig
Provides: %{name} = %{version}-%{release}

%description
VirtualGL is a toolkit that allows most Unix/Linux OpenGL applications to be
remotely displayed with hardware 3D acceleration to thin clients, regardless
of whether the clients have 3D capabilities, and regardless of the size of the
3D data being rendered or the speed of the network.

Using the vglrun script, the VirtualGL "faker" is loaded into an OpenGL
application at run time.  The faker then intercepts a handful of GLX calls,
which it reroutes to the server's X display (the "3D X Server", which
presumably has a 3D accelerator attached.)  The GLX commands are also
dynamically modified such that all rendering is redirected into a Pbuffer
instead of a window.  As each frame is rendered by the application, the faker
reads back the pixels from the 3D accelerator and sends them to the
"2D X Server" for compositing into the appropriate X Window.

VirtualGL can be used to give hardware-accelerated 3D capabilities to VNC or
other X proxies that either lack OpenGL support or provide it through software
rendering.  In a LAN environment, VGL can also be used with its built-in
high-performance image transport, which sends the rendered 3D images to a
remote client (vglclient) for compositing on a remote X server.  VirtualGL
also supports image transport plugins, allowing the rendered 3D images to be
sent or captured using other mechanisms.

VirtualGL is based upon ideas presented in various academic papers on
this topic, including "A Generic Solution for Hardware-Accelerated Remote
Visualization" (Stegmaier, Magallon, Ertl 2002) and "A Framework for
Interactive Hardware Accelerated Remote 3D-Visualization" (Engel, Sommer,
Ertl 2000.)

#-->%prep
#-->%setup -q

#-->%build
#-->cmake -G"Unix Makefiles" -DCMAKE_INSTALL_PREFIX=%{prefix} -DVGL_BINDIR=%{bindir} -DVGL_DOCDIR=%{docdir} -DVGL_LIBDIR=%{libdir} -DVGL_INCDIR=%{incdir} -DVGL_FAKELIBDIR=%{fakelibdir} -DVGL_USEXV=@VGL_USEXV@ -DCMAKE_BUILD_TYPE=@CMAKE_BUILD_TYPE@ -DCMAKE_VERBOSE_MAKEFILE=@CMAKE_VERBOSE_MAKEFILE@ .
#-->make

%install
rm -rf $RPM_BUILD_ROOT
make install DESTDIR=$RPM_BUILD_ROOT
rm $RPM_BUILD_ROOT/%{bindir}/.vglrun.vars*

%if "%{bindir}" != "%{_bindir}" && %{binsymlinks}
mkdir -p $RPM_BUILD_ROOT/%{_bindir}
pushd $RPM_BUILD_ROOT/%{bindir}
for i in vgl*; do
	ln -fs %{bindir}/$i $RPM_BUILD_ROOT/%{_bindir}/
done
popd
%endif

%if "%{incdir}" != "%{_includedir}" && %{incsymlinks}
mkdir -p $RPM_BUILD_ROOT/%{_includedir}
pushd $RPM_BUILD_ROOT/%{incdir}
for i in *; do
	ln -fs %{incdir}/$i $RPM_BUILD_ROOT/%{_includedir}/
done
popd
%endif

#-->%if 0

# This is only needed to support in-tree RPM generation via 'make rpm'.  When
# building from a SRPM, we control where things are installed via CMake
# variables.

safedirmove ()
{
	if [ "$1" = "$2" ]; then
		return 0
	fi
	if [ "$1" = "" -o ! -d "$1" ]; then
		echo safedirmove: source dir $1 is not valid
		return 1
	fi
	if [ "$2" = "" -o -e "$2" ]; then
		echo safedirmove: dest dir $2 is not valid
		return 1
	fi
	if [ "$3" = "" -o -e "$3" ]; then
		echo safedirmove: tmp dir $3 is not valid
		return 1
	fi
	mkdir -p $3
	mv $1/* $3/
	rmdir $1
	mkdir -p $2
	mv $3/* $2/
	rmdir $3
	return 0
}

VGL_DOCDIR=@VGL_DOCDIR@
if [ ! "$VGL_DOCDIR" = "%{docdir}" ]; then
	safedirmove $RPM_BUILD_ROOT/$VGL_DOCDIR $RPM_BUILD_ROOT/%{docdir} $RPM_BUILD_ROOT/__tmpdoc
fi

VGL_LIBDIR=@VGL_LIBDIR@
if [ ! "$VGL_LIBDIR" = "%{libdir}" ]; then
	safedirmove $RPM_BUILD_ROOT/$VGL_LIBDIR $RPM_BUILD_ROOT/%{libdir} $RPM_BUILD_ROOT/__tmplib
fi

VGL_FAKELIBDIR=@VGL_FAKELIBDIR@
rm $RPM_BUILD_ROOT/$VGL_FAKELIBDIR/libGL.so
rmdir $RPM_BUILD_ROOT/$VGL_FAKELIBDIR
mkdir -p $RPM_BUILD_ROOT/%{fakelibdir}
ln -fs %{libdir}/librrfaker.so $RPM_BUILD_ROOT/%{fakelibdir}/libGL.so

#-->%endif

%if "%{prefix}" == "/opt/VirtualGL" && "%{docdir}" != "%{prefix}/doc"
	ln -fs %{docdir} $RPM_BUILD_ROOT/%{prefix}/doc
%endif

echo '/usr/lib/rpm/find-requires|grep -v libGLcore|grep -v libnvidia-tls' >%{_tmppath}/%{name}-%{version}-%{release}-find-requires
chmod 755 %{_tmppath}/%{name}-%{version}-%{release}-find-requires

%clean
rm -rf $RPM_BUILD_ROOT
rm %{_tmppath}/%{name}-%{version}-%{release}-find-requires

%post
/sbin/ldconfig

%postun
/sbin/ldconfig

%files -n %{name}
%defattr(-,root,root)

%dir %{prefix}
%if "%{prefix}" == "/opt/VirtualGL" && "%{docdir}" != "%{prefix}/doc"
 %{prefix}/doc
%endif

%dir %{docdir}
%doc %{docdir}/*

%dir %{bindir}
%{bindir}/glreadtest
%{bindir}/tcbench
%{bindir}/nettest
%{bindir}/cpustat
%{bindir}/glxinfo
%{bindir}/vglclient
%{bindir}/vglconfig
%{bindir}/vglconnect
%{bindir}/vglgenkey
%{bindir}/vgllogin
%{bindir}/vglserver_config
%{bindir}/vglrun
%ifarch x86_64
 %{bindir}/glxspheres64
%else
 %{bindir}/glxspheres
%endif
%if "%{bindir}" != "%{_bindir}" && %{binsymlinks}
 %{_bindir}/vglclient
 %{_bindir}/vglconfig
 %{_bindir}/vglconnect
 %{_bindir}/vgllogin
 %{_bindir}/vglrun
 %{_bindir}/vglgenkey
 %{_bindir}/vglserver_config
%endif

%dir %{fakelibdir}
%{fakelibdir}/libGL.so

%dir %{incdir}
%{incdir}/rrtransport.h
%{incdir}/rr.h
%if "%{incdir}" != "%{_includedir}" && %{incsymlinks}
 %{_includedir}/rrtransport.h
 %{_includedir}/rr.h
%endif

%if "%{libdir}" != "%{_syslibdir}"
%dir %{libdir}
%endif
%{libdir}/librrfaker.so
%{libdir}/libdlfaker.so
%{libdir}/libgefaker.so

%changelog
